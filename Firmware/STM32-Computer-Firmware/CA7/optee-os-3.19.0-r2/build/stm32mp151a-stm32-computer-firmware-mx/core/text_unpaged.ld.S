	*(.text.tee_time_get_sys_time)
	*(.text.read_cntfrq)
	*(.text.read_cntpct)
	*(.text.isb)
	*(.text.barrier_read_counter_timer)
	*(.text.arm_cnt_us2cnt)
	*(.text.timeout_init_us)
	*(.text.timeout_elapsed)
	*(.text.udelay)
	*(.text.mdelay)
	*(.text.dsb)
	*(.text.wfi)
	*(.text.cpu_idle)
	*(.text.arm_cntpct_get_sys_time)
	*(.text.plat_prng_add_jitter_entropy)
	*(.text.__cpu_spin_lock)
	*(.text.__cpu_spin_trylock)
	*(.text.__cpu_spin_unlock)
	*(.text.tlbi_all)
	*(.text.dcache_cleaninv_range)
	*(.text.dcache_inv_range)
	*(.text.do_dcsw_op)
	*(.text.dcache_op_louis)
	*(.text.dcache_op_all)
	*(.text.dcache_op_level1)
	*(.text.icache_inv_all)
	*(.text.thread_set_abt_sp)
	*(.text.thread_set_und_sp)
	*(.text.thread_set_irq_sp)
	*(.text.thread_set_fiq_sp)
	*(.text.thread_resume)
	*(.text.thread_save_state)
	*(.text.thread_init_vbar)
	*(.text.thread_unwind_user_mode)
	*(.text.thread_excp_vect)
	*(.text.read_midr)
	*(.text.read_cpsr)
	*(.text.write_cpsr)
	*(.text.tee_ta_update_session_utime_suspend)
	*(.text.tee_ta_update_session_utime_resume)
	*(.text.tee_ta_gprof_sample_pc)
	*(.text.tee_ta_ftrace_update_times_suspend)
	*(.text.tee_ta_ftrace_update_times_resume)
	*(.text.assert_have_no_spinlock)
	*(.text.tee_pager_release_phys)
	*(.text.thread_get_exceptions)
	*(.text.thread_set_exceptions)
	*(.text.thread_mask_exceptions)
	*(.text.thread_unmask_exceptions)
	*(.text.thread_lazy_save_ns_vfp)
	*(.text.thread_lazy_restore_ns_vfp)
	*(.text.init_regs)
	*(.text.__thread_alloc_and_run)
	*(.text.thread_alloc_and_run)
	*(.text.copy_a0_to_a3)
	*(.text.is_from_user)
	*(.text.ftrace_suspend)
	*(.text.ftrace_resume)
	*(.text.is_user_mode)
	*(.text.thread_resume_from_rpc)
	*(.text.thread_state_free)
	*(.text.release_unused_kernel_stack)
	*(.text.thread_state_suspend)
	*(.text.get_midr_implementer)
	*(.text.get_midr_primary_part)
	*(.text.get_midr_variant)
	*(.text.get_midr_revision)
	*(.text.select_vector_wa_spectre_v2)
	*(.text.select_vector_wa_spectre_bhb)
	*(.text.get_excp_vect)
	*(.text.thread_init_per_cpu)
	*(.text.thread_kernel_save_vfp)
	*(.text.thread_kernel_restore_vfp)
	*(.text.thread_user_enable_vfp)
	*(.text.thread_user_save_vfp)
	*(.text.setup_unwind_user_mode)
	*(.text.gprof_set_status)
	*(.text.thread_svc_handler)
	*(.text.reg_pair_to_64)
	*(.text.reg_pair_from_64)
	*(.text.mobj_get_va)
	*(.text.mobj_get_pa)
	*(.text.mobj_matches)
	*(.text.mobj_put)
	*(.text.mobj_get_cookie)
	*(.text.thread_handle_fast_smc)
	*(.text.thread_handle_std_smc)
	*(.text.thread_rpc_free_arg)
	*(.text.thread_disable_prealloc_rpc_cache)
	*(.text.thread_enable_prealloc_rpc_cache)
	*(.text.rpc_shm_mobj_alloc)
	*(.text.thread_rpc_alloc_arg)
	*(.text.set_rmem)
	*(.text.set_tmem)
	*(.text.get_rpc_arg)
	*(.text.get_rpc_arg_res)
	*(.text.thread_rpc_cmd)
	*(.text.thread_std_smc_entry)
	*(.text.thread_rpc)
	*(.text.thread_foreign_intr_exit)
	*(.text.read_contextidr)
	*(.text.read_ttbr0)
	*(.text.read_ttbr1)
	*(.text.read_dfar)
	*(.text.read_dfsr)
	*(.text.read_ifar)
	*(.text.read_ifsr)
	*(.text.get_core_pos)
	*(.text.is_user_ta_ctx)
	*(.text.to_user_ta_ctx)
	*(.text.tee_pager_handle_fault)
	*(.text.is_sp_ctx)
	*(.text.to_sp_ctx)
	*(.text.to_stmm_ctx)
	*(.text.to_user_mode_ctx)
	*(.text.__print_stack_unwind)
	*(.text.abort_type_to_str)
	*(.text.fault_to_str)
	*(.text.__print_abort_info)
	*(.text.__abort_print)
	*(.text.abort_print)
	*(.text.abort_print_error)
	*(.text.save_abort_info_in_tsd)
	*(.text.set_abort_info)
	*(.text.handle_user_mode_panic)
	*(.text.handle_user_mode_vfp)
	*(.text.abort_is_user_exception)
	*(.text.is_vfp_fault)
	*(.text.get_fault_type)
	*(.text.plat_abort_handler)
	*(.text.abort_handler)
	*(.text.vfp_is_enabled)
	*(.text.vfp_enable)
	*(.text.vfp_disable)
	*(.text.vfp_lazy_save_state_init)
	*(.text.vfp_lazy_save_state_final)
	*(.text.vfp_lazy_restore_state)
	*(.text.vfp_save_extension_regs)
	*(.text.vfp_restore_extension_regs)
	*(.text.vfp_write_fpexc)
	*(.text.vfp_read_fpexc)
	*(.text.vfp_write_fpscr)
	*(.text.vfp_read_fpscr)
	*(.text.spinlock_count_incr)
	*(.text.spinlock_count_decr)
	*(.text.cpu_spin_lock_no_dldetect)
	*(.text.cpu_spin_trylock)
	*(.text.cpu_spin_unlock)
	*(.text.plat_trace_ext_puts)
	*(.text.trace_ext_puts)
	*(.text.trace_ext_get_thread_id)
	*(.text.trace_ext_get_core_id)
	*(.text.get_core_pos_mpidr)
	*(.text.temp_set_mode)
	*(.text.read_mode_sp)
	*(.text.read_mode_lr)
	*(.text.read_cpacr)
	*(.text.write_cpacr)
	*(.text.read_nsacr)
	*(.text.write_nsacr)
	*(.text.write_cntfrq)
	*(.text.dsb_ishst)
	*(.text.dmb)
	*(.text.sev)
	*(.text.plat_primary_init_early)
	*(.text.init_sec_mon)
	*(.text.init_vfp_nsec)
	*(.text.init_vfp_sec)
	*(.text.secondary_init_cntfrq)
	*(.text.init_secondary_helper)
	*(.text.boot_init_secondary)
	*(.text.boot_set_core_ns_entry)
	*(.text.boot_core_release)
	*(.text.boot_core_hpen)
	*(.text.unhandled_cpu)
	*(.text.dummy.boot_init_primary_late)
	*(.text.dummy.__thread_std_smc_entry)
	*(.text.dummy.core_init_mmu_map)
	*(.text.dummy.boot_init_primary_early)
	*(.text.read_sctlr)
	*(.text.write_ats1cpr)
	*(.text.read_par64)
	*(.text.arch_va2pa_helper)
	*(.text.cpu_mmu_enabled)
	*(.text.read_ttbr0_64bit)
	*(.text.write_ttbr0_64bit)
	*(.text.feat_bti_is_implemented)
	*(.text.get_prtn)
	*(.text.mattr_to_desc)
	*(.text.core_mmu_xlat_table_entry_pa2va)
	*(.text.core_mmu_find_table)
	*(.text.core_mmu_set_entry_primitive)
	*(.text.core_mmu_get_user_mapping_entry)
	*(.text.core_mmu_user_mapping_is_active)
	*(.text.core_mmu_get_user_map)
	*(.text.core_mmu_set_user_map)
	*(.text.core_mmu_get_fault_type)
	*(.text.atomic_store_uint)
	*(.text.refcount_set)
	*(.text.cpu_spin_lock)
	*(.text.cpu_spin_lock_xsave_no_dldetect)
	*(.text.cpu_spin_lock_xsave)
	*(.text.cpu_spin_unlock_xrestore)
	*(.text.mobj_inc_map)
	*(.text.mobj_reg_shm_size)
	*(.text.mobj_reg_shm_get_pa)
	*(.text.reg_shm_unmap_helper)
	*(.text.reg_shm_free_helper)
	*(.text.mobj_reg_shm_free)
	*(.text.mobj_reg_shm_get_cookie)
	*(.text.mobj_reg_shm_matches)
	*(.text.to_mobj_reg_shm)
	*(.text.mobj_reg_shm_alloc)
	*(.text.mobj_mapped_shm_alloc)
	*(.text.tee_enable_l2cc_mutex)
	*(.text.tee_disable_l2cc_mutex)
	*(.text.tee_get_l2cc_mutex)
	*(.text.tee_set_l2cc_mutex)
	*(.text.tee_entry_fastcall_l2cc_mutex)
	*(.text.tee_entry_exchange_capabilities)
	*(.text.tee_entry_disable_shm_cache)
	*(.text.tee_entry_enable_shm_cache)
	*(.text.tee_entry_boot_secondary)
	*(.text.tee_entry_get_thread_count)
	*(.text.tee_entry_fast)
	*(.text.__tee_entry_fast)
	*(.text.tee_entry_generic_get_api_call_count)
	*(.text.tee_entry_get_api_call_count)
	*(.text.tee_entry_get_api_uuid)
	*(.text.tee_entry_get_api_revision)
	*(.text.tee_entry_get_os_uuid)
	*(.text.tee_entry_get_os_revision)
	*(.text.read_cntp_ctl)
	*(.text.write_cntp_ctl)
	*(.text.read_cntv_ctl)
	*(.text.write_cntv_ctl)
	*(.text.io_read32)
	*(.text.stm32mp_dump_core_registers)
	*(.text.console_init)
	*(.text.stm32_dbgmcu_base)
	*(.text.stm32mp1_dbgmcu_get_chip_dev_id)
	*(.text.itr_core_handler)
	*(.text.main_secondary_init_gic)
	*(.text.stm32mp_mask_timer)
	*(.text.sgi9_it_handler)
	*(.text.stm32_rcc_base)
	*(.text.get_gicd_base)
	*(.text.may_spin_lock)
	*(.text.may_spin_unlock)
	*(.text.stm32_tamp_base)
	*(.text.bkpreg_base)
	*(.text.stm32mp_bkpreg)
	*(.text.stm32mp_bkpsram_base)
	*(.text.stm32mp_stgen_base)
	*(.text.plat_panic)
	*(.text.get_chip_dev_id)
	*(.text.get_part_number)
	*(.text.stm32mp_supports_second_core)
	*(.text.do_reset)
	*(.text.plat_cpu_reset_early)
	*(.text.confine_array_index)
	*(.text.scmi_smt_init_agent_channel)
	*(.text.find_resource)
	*(.text.plat_scmi_get_channel)
	*(.text.stm32_scmi_pm)
	*(.text.tzc_it_handler)
	*(.text.stm32mp_tzc_region0)
	*(.text.stm32mp_tzc_reset_region)
	*(.text.stm32mp1_tzc_pm)
	*(.text.stm32mp1_calib_pm)
	*(.text.pmic_is_secure)
	*(.text.stm32mp_with_pmic)
	*(.text.pmic_set_state)
	*(.text.pmic_get_state)
	*(.text.pmic_get_voltage)
	*(.text.pmic_set_voltage)
	*(.text.pmic_list_voltages)
	*(.text.pmic_set_flag)
	*(.text.driver_lock)
	*(.text.driver_unlock)
	*(.text.driver_suspend)
	*(.text.stpmic1_regu_pm)
	*(.text.pmic_pm)
	*(.text.stm32mp_get_pmic)
	*(.text.stm32mp_put_pmic)
	*(.text.stm32mp_pm_get_pmic)
	*(.text.io_write32)
	*(.text.io_setbits32)
	*(.text.io_clrbits32)
	*(.text.stm32_pwr_base)
	*(.text.pwr_set_state)
	*(.text.pwr_get_state)
	*(.text.pwr_get_voltage)
	*(.text.pwr_list_voltages)
	*(.text.stm32mp1_pwr_regul_lock)
	*(.text.stm32mp1_pwr_regul_unlock)
	*(.text.get_syscfg_base)
	*(.text.enable_high_speed_mode_low_voltage)
	*(.text.syscfg_hslv_pm)
	*(.text.sip_service)
	*(.text.oem_service)
	*(.text.sm_platform_handler)
	*(.text.pm_domain_scv_handler)
	*(.text.io_setbits32_stm32shregs)
	*(.text.io_clrbits32_stm32shregs)
	*(.text.pwr_scv_handler)
	*(.text.write_sctlr)
	*(.text.get_retram_resume_ctx)
	*(.text.get_pm_mailbox)
	*(.text.save_time)
	*(.text.restore_time)
	*(.text.stm32mp_pm_wipe_context)
	*(.text.save_ddr_training_area)
	*(.text.load_earlyboot_pm_mailbox)
	*(.text.enable_pm_mailbox)
	*(.text.gate_pm_context_clocks)
	*(.text.stm32mp_pm_save_context)
	*(.text.stm32mp_pm_restore_context)
	*(.text.stm32mp_pm_shutdown_context)
	*(.text.stm32mp_pm_call_bl2_lp_entry)
	*(.text.io_clrsetbits32)
	*(.text.watchdog_ping)
	*(.text.set_rcc_it_priority)
	*(.text.restore_rcc_it_priority)
	*(.text.wait_console_flushed)
	*(.text.cpu_wfi)
	*(.text.stm32_pm_cpu_wfi)
	*(.text.stm32_enter_cstop)
	*(.text.stm32_exit_cstop)
	*(.text.stm32_enter_cstop_shutdown)
	*(.text.stm32_enter_csleep)
	*(.text.rcc_wakeup_it_handler)
	*(.text.stm32_pm_cpu_power_down_wfi)
	*(.text.stm32mp_sysram_resume)
	*(.text.stm32mp_cpu_reset_state)
	*(.text.stm32mp1_is_retram_during_standby)
	*(.text.need_to_backup_cpu_context)
	*(.text.get_pm_domain_state)
	*(.text.stm32mp1_set_pm_domain_state)
	*(.text.is_supported_mode)
	*(.text.stm32mp1_get_lp_soc_mode)
	*(.text.read_isr)
	*(.text.lock_state_access)
	*(.text.unlock_state_access)
	*(.text.psci_affinity_info)
	*(.text.stm32mp_register_online_cpu)
	*(.text.raise_sgi0_as_secure)
	*(.text.release_secondary_early_hpen)
	*(.text.psci_cpu_on)
	*(.text.psci_cpu_off)
	*(.text.enter_cstop_suspend)
	*(.text.plat_suspend)
	*(.text.plat_resume)
	*(.text.plat_can_suspend)
	*(.text.psci_system_suspend)
	*(.text.psci_system_off)
	*(.text.psci_system_reset)
	*(.text.psci_features)
	*(.text.psci_version)
	*(.text.sm_save_unbanked_regs)
	*(.text.sm_restore_unbanked_regs)
	*(.text.sm_smc_entry)
	*(.text.sm_fiq_entry)
	*(.text.sm_vect_table)
	*(.text.sm_vect_table_a15)
	*(.text.sm_vect_table_bpiall)
	*(.text.sm_init)
	*(.text.sm_get_nsec_ctx)
	*(.text.wdt_sm_handler)
	*(.text.smc_arch_handler)
	*(.text.sm_from_nsec)
	*(.text.sm_pm_cpu_suspend_save)
	*(.text.sm_pm_cpu_suspend)
	*(.text.sm_pm_cpu_do_suspend)
	*(.text.sm_pm_cpu_resume)
	*(.text.sm_pm_cpu_do_resume)
	*(.text.smc_std_handler)
	*(.text.psci_cpu_suspend)
	*(.text.psci_migrate)
	*(.text.psci_migrate_info_type)
	*(.text.psci_migrate_info_up_cpu)
	*(.text.psci_mem_protect)
	*(.text.psci_mem_chk_range)
	*(.text.psci_system_reset2)
	*(.text.psci_node_hw_state)
	*(.text.tee_psci_handler)
	*(.text.psci_disable_smp)
	*(.text.psci_armv7_cpu_off)
	*(.text.crypto_rng_add_event)
	*(.text.tzc_write_region_base_low)
	*(.text.tzc_write_region_base_high)
	*(.text.tzc_write_region_top_low)
	*(.text.tzc_write_region_top_high)
	*(.text.tzc_write_region_attributes)
	*(.text.tzc_write_region_id_access)
	*(.text.addr_low)
	*(.text.addr_high)
	*(.text.tzc_configure_region)
	*(.text.write_not_read)
	*(.text.nonsecure_not_secure)
	*(.text.priv_not_unpriv)
	*(.text.dump_fail_filter)
	*(.text.tzc_fail_dump)
	*(.text.tzc_int_clear)
	*(.text.io_write8)
	*(.text.io_read8)
	*(.text.io_mask32)
	*(.text.gic_cpu_init)
	*(.text.gic_init_setup)
	*(.text.gic_it_add)
	*(.text.gic_it_set_cpu_mask)
	*(.text.gic_it_set_prio)
	*(.text.gic_op_set_pmr)
	*(.text.gic_op_set_ipriority)
	*(.text.gic_it_enable)
	*(.text.gic_it_disable)
	*(.text.gic_it_set_pending)
	*(.text.gic_it_raise_sgi)
	*(.text.gic_read_iar)
	*(.text.gic_write_eoir)
	*(.text.gic_it_handle)
	*(.text.gic_op_add)
	*(.text.gic_op_enable)
	*(.text.gic_op_disable)
	*(.text.gic_op_raise_pi)
	*(.text.gic_op_raise_sgi)
	*(.text.gic_op_set_affinity)
	*(.text.gic_pm_add_it)
	*(.text.gic_save_it)
	*(.text.gic_restore_it)
	*(.text.gic_pm)
	*(.text.bsec_lock)
	*(.text.bsec_unlock)
	*(.text.otp_max_id)
	*(.text.otp_bank_offset)
	*(.text.bsec_base)
	*(.text.bsec_status)
	*(.text.is_invalid_mode)
	*(.text.check_no_error)
	*(.text.power_up_safmem)
	*(.text.power_down_safmem)
	*(.text.stm32_bsec_shadow_register)
	*(.text.stm32_bsec_read_otp)
	*(.text.stm32_bsec_shadow_read_otp)
	*(.text.stm32_bsec_write_otp)
	*(.text.stm32_bsec_write_debug_conf)
	*(.text.stm32_bsec_read_debug_conf)
	*(.text.set_bsec_lock)
	*(.text.stm32_bsec_set_sr_lock)
	*(.text.stm32_bsec_set_sw_lock)
	*(.text.read_bsec_lock)
	*(.text.stm32_bsec_read_sr_lock)
	*(.text.stm32_bsec_read_sw_lock)
	*(.text.stm32_bsec_find_otp_in_nvmem_layout)
	*(.text.bsec_pm)
	*(.text.stm32_rifsc_check_tdcid)
	*(.text.stm32_rif_acquire_semaphore)
	*(.text.stm32_rif_release_semaphore)
	*(.text.stm32_gpio_get_bank)
	*(.text.set_gpio_cfg)
	*(.text.get_gpio_cfg)
	*(.text.stm32_pinctrl_load_config)
	*(.text.apply_rif_config)
	*(.text.stm32_gpio_save_rif_config)
	*(.text.stm32_gpio_get_conf_sec)
	*(.text.stm32_gpio_set_conf_sec)
	*(.text.stm32_gpio_pm_resume)
	*(.text.stm32_gpio_pm_suspend)
	*(.text.stm32_gpio_pm)
	*(.text.itr_alloc_add)
	*(.text.sr_ewif_mask)
	*(.text.get_base)
	*(.text.iwdg_wdt_set_enabled)
	*(.text.iwdg_wdt_is_enabled)
	*(.text.iwdg_timeout_cnt)
	*(.text.iwdg_wait_sync)
	*(.text.stm32_iwdg_it_handler)
	*(.text.configure_timeout)
	*(.text.iwdg_start)
	*(.text.iwdg_refresh)
	*(.text.wdt_chip_to_iwdg)
	*(.text.iwdg_wdt_init)
	*(.text.iwdg_wdt_start)
	*(.text.iwdg_wdt_refresh)
	*(.text.iwdg_wdt_set_timeout)
	*(.text.iwdg_wdt_get_timeleft)
	*(.text.stm32_iwdg_pm)
	*(.text.notif_i2c_timeout)
	*(.text.save_cfg)
	*(.text.restore_cfg)
	*(.text.i2c_flush_txdr)
	*(.text.wait_isr_event)
	*(.text.i2c_ack_failed)
	*(.text.i2c_wait_txis)
	*(.text.i2c_wait_stop)
	*(.text.i2c_transfer_config)
	*(.text.stm32_i2c_read_write_membyte)
	*(.text.stm32_i2c_resume)
	*(.text.stm32_i2c_suspend)
	*(.text.enable_rng_clock)
	*(.text.disable_rng_clock)
	*(.text.stm32_rng_pm_resume)
	*(.text.stm32_rng_pm_suspend)
	*(.text.stm32_rng_pm)
	*(.text.stm32_rtc_get_bypshad)
	*(.text.stm32_rtc_read_calendar)
	*(.text.stm32_rtc_get_time)
	*(.text.stm32_rtc_get_date)
	*(.text.stm32_rtc_get_calendar)
	*(.text.stm32_rtc_get_subsecond)
	*(.text.stm32_rtc_get_subsecond_scale)
	*(.text.stm32_rtc_diff_subs_tick)
	*(.text.stm32_rtc_diff_subs_ms)
	*(.text.stm32_rtc_diff_time_ms)
	*(.text.stm32_is_a_leap_year)
	*(.text.stm32_rtc_diff_date_ms)
	*(.text.stm32_rtc_diff_calendar_ms)
	*(.text.lock_stm32shregs)
	*(.text.unlock_stm32shregs)
	*(.text.io_mask32_stm32shregs)
	*(.text.stm32_tamp_itamper_action)
	*(.text.stm32_tamp_etamper_action)
	*(.text.loc_chip_to_base)
	*(.text.loc_flush)
	*(.text.loc_putc)
	*(.text.loc_have_rx_data)
	*(.text.loc_getchar)
	*(.text.stm32_uart_init)
	*(.text.provision)
	*(.text.load_provisioning)
	*(.text.provisioning_pm)
	*(.text.get_regulator_data)
	*(.text.voltage_to_index)
	*(.text.stpmic1_switch_off)
	*(.text.stpmic1_regulator_enable)
	*(.text.stpmic1_regulator_disable)
	*(.text.stpmic1_is_regulator_enabled)
	*(.text.find_plat_mask)
	*(.text.stpmic1_regulator_voltage_set)
	*(.text.stpmic1_regulator_pull_down_set)
	*(.text.stpmic1_regulator_mask_reset_set)
	*(.text.stpmic1_regulator_icc_set)
	*(.text.stpmic1_regulator_sink_mode_set)
	*(.text.stpmic1_regulator_bypass_mode_set)
	*(.text.stpmic1_active_discharge_mode_set)
	*(.text.stpmic1_regu_has_lp_cfg)
	*(.text.stpmic1_lp_copy_reg)
	*(.text.stpmic1_lp_reg_on_off)
	*(.text.stpmic1_lp_set_voltage)
	*(.text.stpmic1_regulator_levels_mv)
	*(.text.stpmic1_regulator_voltage_get)
	*(.text.stpmic1_register_read)
	*(.text.stpmic1_register_write)
	*(.text.stpmic1_register_update)
	*(.text.stm32_firewall_priv)
	*(.text.etzpc_lock)
	*(.text.etzpc_unlock)
	*(.text.etzpc_configure_decprot)
	*(.text.etzpc_get_decprot)
	*(.text.etzpc_lock_decprot)
	*(.text.is_decprot_locked)
	*(.text.etzpc_configure_tzma)
	*(.text.etzpc_get_tzma)
	*(.text.etzpc_lock_tzma)
	*(.text.is_tzma_locked)
	*(.text.etzpc_pm)
	*(.text.atomic_load_uint)
	*(.text.refcount_val)
	*(.text.clk_is_enabled_no_lock)
	*(.text.clk_is_enabled)
	*(.text.clk_disable_no_lock)
	*(.text.clk_enable_no_lock)
	*(.text.clk_enable)
	*(.text.clk_disable)
	*(.text.clk_get_rate)
	*(.text.clk_get_parent)
	*(.text.clk_stm32_get_priv)
	*(.text.stm32_mux_set_parent)
	*(.text.stm32_gate_is_enabled)
	*(.text.stm32_gate_wait_ready)
	*(.text.stm32_div_set_value)
	*(.text.clock_id2parent_id)
	*(.text.osc_frequency)
	*(.text.gate_ref)
	*(.text.clk_sel_ref)
	*(.text.pll_ref)
	*(.text.stm32mp1_clk_get_gated_id)
	*(.text.stm32mp1_clk_get_sel)
	*(.text.stm32mp1_clk_get_fixed_parent)
	*(.text.stm32mp1_clk_get_parent)
	*(.text.stm32mp1_pll_get_fref)
	*(.text.stm32mp1_pll_get_fvco)
	*(.text.stm32mp1_read_pll_freq)
	*(.text.pll_start)
	*(.text.pll_output)
	*(.text.pll_stop)
	*(.text.pll_compute_pllxcfgr2)
	*(.text.pll_config_output)
	*(.text.pll_compute_pllxcfgr1)
	*(.text.pll_config)
	*(.text.get_clock_rate)
	*(.text.__clk_is_enabled)
	*(.text.__clk_enable)
	*(.text.__clk_disable)
	*(.text.get_timer_rate)
	*(.text._stm32_clock_get_rate)
	*(.text.clk_is_gate)
	*(.text.clk_to_clock_id)
	*(.text.clk_to_gate_ref)
	*(.text.clock_id_to_gate_index)
	*(.text.clock_id_to_always_on_index)
	*(.text.clock_id_to_clk)
	*(.text.stm32mp_rcc_clock_id_to_clk)
	*(.text.clk_op_compute_rate)
	*(.text.clk_op_enable)
	*(.text.clk_op_disable)
	*(.text.clk_stm32_get_rate_oscillateur)
	*(.text.stm32_clk_configure_mux)
	*(.text.is_pll_config_on_the_fly)
	*(.text.stm32mp1_get_mpu_div)
	*(.text.pll1_config_from_opp_khz)
	*(.text.save_pll34_state)
	*(.text.restore_pll34_state)
	*(.text.backup_mux_cfg)
	*(.text.restore_mux_cfg)
	*(.text.backup_sc_cfg)
	*(.text.restore_sc_cfg)
	*(.text.backup_regular_cfg)
	*(.text.restore_regular_cfg)
	*(.text.disable_kernel_clocks)
	*(.text.enable_kernel_clocks)
	*(.text.clear_rcc_reset_status)
	*(.text.sync_non_secure_clk_state)
	*(.text.stm32_clock_suspend)
	*(.text.stm32_clock_resume)
	*(.text.stm32_clock_pm)
	*(.text.stm32_reset_system)
	*(.text.reset_id2reg_offset)
	*(.text.reset_id2reg_bit_pos)
	*(.text.to_rstline)
	*(.text.stm32_reset_assert_clr_offset)
	*(.text.stm32_reset_deassert_clr_offset)
	*(.text.lock_driver)
	*(.text.unlock_driver)
	*(.text._regulator_set_state)
	*(.text._regulator_enable)
	*(.text.regulator_enable)
	*(.text._regulator_disable)
	*(.text.regulator_disable)
	*(.text.suspend_regulator)
	*(.text.resume_regulator)
	*(.text.regulator_pm)
	*(.text.regulator_core_dump)
	*(.text.fixed_set_state)
	*(.text.fixed_get_state)
	*(.text.watchdog_init)
	*(.text.watchdog_start)
	*(.text.watchdog_stop)
	*(.text.watchdog_settimeout)
	*(.text.watchdog_gettimeleft)
	*(.text.__wdt_sm_handler)
	*(.text.console_putc)
	*(.text.console_flush)
	*(.text.register_serial_console)
	*(.text.do_pm_callback)
	*(.text.call_callbacks)
	*(.text.pm_change_state)
	*(.text.itr_handle)
	*(.text.itr_alloc_add_type_prio)
	*(.text.itr_add_type_prio)
	*(.text.itr_enable)
	*(.text.itr_raise_sgi)
	*(.text.itr_set_pmr)
	*(.text.itr_set_ipriority)
	*(.text.print_kernel_stack)
	*(.text.__do_panic)
	*(.text.atomic_cas_uint)
	*(.text.refcount_inc)
	*(.text.refcount_dec)
	*(.text.is_valid_conf_and_notnull_size)
	*(.text.core_is_buffer_inside)
	*(.text.ts_get_current_session_may_fail)
	*(.text.ts_get_current_session)
	*(.text.wq_wait_init)
	*(.text.thread_spin_trylock)
	*(.text.thread_spin_unlock)
	*(.text.mutex_lock_check)
	*(.text.mutex_unlock_check)
	*(.text.__mutex_lock)
	*(.text.__mutex_unlock)
	*(.text.mutex_unlock)
	*(.text.mutex_lock)
	*(.text.mutex_pm_aware_lock)
	*(.text.mutex_pm_aware_unlock)
	*(.text.cv_signal)
	*(.text.condvar_broadcast)
	*(.text.do_notif)
	*(.text.slist_add_tail)
	*(.text.wq_wait_init_condvar)
	*(.text.wq_wait_final)
	*(.text.wq_wake_next)
	*(.text.wq_promote_condvar)
	*(.text.notif_rpc)
	*(.text.notif_wait)
	*(.text.notif_send_sync)
	*(.text.thread_check_canaries)
	*(.text.thread_lock_global)
	*(.text.thread_unlock_global)
	*(.text.get_core_local)
	*(.text.thread_get_core_local)
	*(.text.thread_clr_boot_thread)
	*(.text.thread_get_tmp_sp)
	*(.text.thread_is_from_abort_mode)
	*(.text.thread_get_id_may_fail)
	*(.text.thread_get_id)
	*(.text.thread_init_thread_core_local)
	*(.text.thread_get_tsd)
	*(.text.thread_get_ctx_regs)
	*(.text.thread_restore_foreign_intr)
	*(.text.mobj_check_offset_and_len)
	*(.text.mobj_phys_get_va)
	*(.text.mobj_phys_get_pa)
	*(.text.to_mobj_phys)
	*(.text.mobj_mm_offs)
	*(.text.mobj_mm_get_va)
	*(.text.mobj_mm_get_pa)
	*(.text.to_mobj_mm)
	*(.text.mobj_shm_get_pa)
	*(.text.to_mobj_shm)
	*(.text.mobj_shm_alloc)
	*(.text.to_mobj_with_fobj)
	*(.text.mobj_with_fobj_get_pa)
	*(.text.vm_pa2va)
	*(.text.mattr_is_cached)
	*(.text.core_mmu_va2idx)
	*(.text.core_mmu_is_dynamic_vaspace)
	*(.text.core_mmap_is_end_of_table)
	*(.text.mmu_lock)
	*(.text.mmu_unlock)
	*(.text.get_memory_map)
	*(.text._pbuf_is_inside)
	*(.text.pa_is_in_map)
	*(.text.va_is_in_map)
	*(.text.pbuf_inside_map_area)
	*(.text.find_map_by_type_and_pa)
	*(.text.find_map_by_va)
	*(.text.find_map_by_pa)
	*(.text.pbuf_is_special_mem)
	*(.text.get_discovered_nsec_ddr)
	*(.text.pbuf_is_nsec_ddr)
	*(.text.core_mmu_nsec_ddr_is_defined)
	*(.text.pbuf_is_sdp_mem)
	*(.text.core_pbuf_is)
	*(.text.map_pa2va)
	*(.text.core_mmu_set_entry)
	*(.text.core_mmu_unmap_pages)
	*(.text.check_pa_matches_va)
	*(.text.virt_to_phys)
	*(.text.check_va_matches_pa)
	*(.text.phys_to_virt_ts_vaspace)
	*(.text.phys_to_virt_tee_ram)
	*(.text.phys_to_virt)
	*(.text.phys_to_virt_io)
	*(.text.io_pa_or_va)
	*(.text.io_pa_or_va_secure)
	*(.text.pfree)
	*(.text.tee_mm_free)
	*(.text.tee_mm_get_smem)
	*(.text.asan_memset_unchecked)
	*(.text.memset_unchecked)
	*(.text.buf_get_pos)
	*(.text.bget)
	*(.text.bgetz)
	*(.text.brel)
	*(.text.malloc_lock)
	*(.text.malloc_unlock)
	*(.text.print_oom)
	*(.text.bget_buf_size)
	*(.text.maybe_tag_buf)
	*(.text.maybe_untag_buf)
	*(.text.raw_malloc_return_hook)
	*(.text.raw_malloc_validate_pools)
	*(.text.raw_free)
	*(.text.raw_calloc)
	*(.text.raw_realloc)
	*(.text.free_helper)
	*(.text.calloc)
	*(.text.realloc_unlocked)
	*(.text.realloc)
	*(.text.free)
	*(.text.memchr)
	*(.text.memcpy)
	*(.text.memset)
	*(.text.strcmp)
	*(.text.strlen)
	*(.text.strncmp)
	*(.text.__aeabi_ldivmod)
	*(.text.__aeabi_uldivmod)
	*(.text.division_lqr)
	*(.text.ul_div_qr)
	*(.text.__ul_divmod)
	*(.text.__l_divmod)
	*(.text.snprintk)
	*(.text.vsnprintk)
	*(.text.__vsnprintf)
	*(.text.uuid2str)
	*(.text.kprintf)
	*(.text.trace_level_to_string)
	*(.text.print_thread_id)
	*(.text.print_core_id)
	*(.text.trace_printf)
	*(.text.trace_vprintf)
